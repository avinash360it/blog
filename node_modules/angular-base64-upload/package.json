{
  "name": "angular-base64-upload",
  "version": "0.1.19",
  "description": "Converts files from file input into base64 encoded models.",
  "main": "index.js",
  "scripts": {
    "test": "grunt test"
  },
  "dependencies": {},
  "devDependencies": {
    "bower": "^1.3.12",
    "grunt": "^0.4.5",
    "grunt-cli": "^0.1.13",
    "grunt-contrib-clean": "^0.6.0",
    "grunt-contrib-concat": "^0.5.1",
    "grunt-contrib-copy": "^0.8.0",
    "grunt-contrib-jshint": "^0.10.0",
    "grunt-contrib-uglify": "^0.9.1",
    "grunt-contrib-watch": "^0.6.1",
    "grunt-karma": "^0.9.0",
    "grunt-then": "^1.0.0",
    "karma": "^0.12.23",
    "karma-coverage": "^0.2.6",
    "karma-jasmine": "^0.1.5",
    "karma-phantomjs-launcher": "^0.1.4",
    "karma-story-reporter": "^0.3.1",
    "load-grunt-tasks": "^3.2.0"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/adonespitogo/angular-base64-upload.git"
  },
  "keywords": [
    "angularjs",
    "angular",
    "base-64",
    "base64",
    "upload",
    "file",
    "input",
    "convert"
  ],
  "author": {
    "name": "Adones Pitogo",
    "email": "pitogo.adones@gmail.com"
  },
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/adonespitogo/angular-base64-upload/issues"
  },
  "homepage": "https://github.com/adonespitogo/angular-base64-upload",
  "readme": "angular-base64-upload\n=====================\n\n![Alt text](https://travis-ci.org/adonespitogo/angular-base64-upload.svg?branch=master \"Travis-CI build status\")\n\nConverts files from file input into base64 encoded models.\nThis directive is based from one of the answers in this [SO question](http://stackoverflow.com/questions/20521366/rails-4-angularjs-paperclip-how-to-upload-file).\n\nRequires angular version greater than or equal to `1.2.0`. Tested on angular versions `1.2.0` through `1.3.15`.\n\n\n```html\n  <input type=\"file\" ng-model=\"myfile\" base-sixty-four-input>\n```\n\n`$scope.myfile` :\n```javascript\n  {\n    \"filesize\": 54836, /* bytes */\n    \"filetype\": \"image/jpeg\",\n    \"filename\": \"profile.jpg\",\n    \"base64\":   \"/9j/4AAQSkZJRgABAgAAAQABAAD//gAEKgD/4gIctcwIQA...\"\n  }\n```\n\nInstallation\n-------------\n - Bower -  `bower install angular-base64-upload`\n - NPM - `npm install angular-base64-upload`\n\nExample\n--------------------------\nSee [plunker](http://embed.plnkr.co/MTzfQASN8ZVeocAq7VcM/preview) or the [./demo](https://github.com/adonespitogo/angular-base64-upload/tree/master/demo) folder.\n\nUsage\n-------\n\nInclude `angular.js` and `angular-base64-upload.js` in your application and add `naif.base64` as dependency to your main module.\n\n```\nangular.module('myApp', ['naif.base64']);\n```\n\n```html\n<form>\n  <input type='file' ng-model='yourModel' base-sixty-four-input>\n</form>\n```\n\nMultiple File Selection\n--------------\nJust add `multiple` attribute to the input element. `yourModel` will be an array of base64 file objects.\n```html\n  <form>\n    <input  type=\"file\" ng-model=\"yourModel\" multiple base-sixty-four-input>\n  </form>\n```\nValidations\n------------\n - `maxsize` = Maximum file size in kilobytes (KB) (applied to all files when multi-select is enabled)\n - `minsize` = Minimum file size in kilobytes (KB) (applied to all files when multi-select is enabled)\n - `maxnum` = Maximum number of items to select (applicable only for multi-select)\n - `minnum` = Minimum number of items to select (applicable only for multi-select)\n - `accept` = [Input file accept attribute](http://www.w3schools.com/tags/att_input_accept.asp). `file_extension|audio/*|video/*|image/*|media_type` comma separated\n - `required` = Checks if the model value is `null`, empty array `[]` or empty object `{}`\n\n```html\n<form name=\"form\">\n  <input type=\"file\" ng-model=\"files\" name=\"files\" multiple accept=\"image/*, .zip\" maxsize=\"5000\" required base-sixty-four-input>\n  <span ng-show=\"form.files.$error.maxsize\">Files must not exceed 5000 KB</span>\n</form>\n```\n\nCustom Parser\n-------------------\nYou can implement your own parsing logic before the data gets added into the model.\n\nUse case: You want images to be auto-resized after selecting files and add custom model attributes.\n\n```\napp.controller('ctrl', function ($scope, $q, imageProcessor) {\n\n  $scope.resizeImage = function ( file, base64_object ) {\n\n    var deferred = $q.defer();\n\n    imageProcessor.run(file).then(function (resized) {\n      var modelVal = {\n        file: file,\n        resized: resized\n      };\n      deferred.resolve(modelVal); // resolved value is appended to the model\n    });\n\n    return deferred.promise;\n  };\n\n});\n\n<input type=\"file\" base-sixty-four-input ng-model=\"images\" parser=\"resizeImage\" multiple>\n\n```\n\nParams:\n - `File` - File object\n - `Object` - base64 encoded representation of file\n\nNote: The parser handler can return a value or a promise. In case of a promise, it's resolved value will be appended to the model.\n\nEvents\n---------\n\n<b>FileReader Events</b> - You can listen to all [FileReader events](https://developer.mozilla.org/en-US/docs/Web/API/FileReader#Event_handlers) by adding attributes to the input element using the format `event_name=\"handler\"`. Ex: `onerror=\"errorHandlerFunc\"`.\n - List of file reader event names:\n   - `onabort`\n   - `onerror`\n   - `onload`\n   - `onloadstart`\n   - `onloadend`\n   - `onprogress`\n - Params\n   - `EventObject` - File reader event object depending on the event type. This can be an `abort`, `error`, `load`, `loadstart`, `loadend`, or `progress` event object.\n   - `FileReader` - A [File Reader](https://developer.mozilla.org/en-US/docs/Web/API/FileReader) instance used to read the file. Each file is read by respective file reader instance.\n   - `File` - Current file being read by the file reader.\n   - `FileList` - Array of selected files.\n   - `FileObjects` - Array of base64 file objects that are done reading.\n   - `Object` - Result of reading the file. In case of reading error, `object.base64` might be undefined.\n\n<b>on-change</b> - Unfortunately, Angular's `ng-change` directive doesn't work so well with input type file. This is the alternative way of binding to input's `onchange` event.\n\n`<input on-change=\"onChangeHandlerFunc\">`\n\n - Params:\n   - Event - Event object.\n   - FileList - Array of selected files.\n\n<b>on-after-validate</b> - Ran after the validations are executed and after file object(s) are added to the model.\n\n`<input on-after-validate=\"onAfterValidateFunc\">`\n\n - Params:\n   - Event - Event object.\n   - FileObjects - Array of base64-encoded files.\n   - FileList - Array of selected files.\n\nExample event handler implementation:\n   ```\n   $scope.errorHandler = function (event, reader, fileList, fileObjs, file) {\n     console.log(\"An error occurred while reading file: \"+file.name);\n     reader.abort();\n   };\n\n   <form>\n    <input type=\"file\" base-sixty-four-input ng-model=\"myfile\" onerror=\"errorHandler\">\n   <form>\n   ```\n\nClearing the input element\n--------------------------\nJust assign your model with `null`, `{}` or `[]` and it will automatically clear the input element\n\nServer-Side\n---------------\n\nYou will have to decode the base64 file in your backend on your own.\nSample PHP code for decoding base64 file in\n[demo folder](https://github.com/adonespitogo/angular-base64-upload/tree/master/demo).\nStart it by cd-ing to this directory and running:\n\n    php -S 0.0.0.0:8000\n\nThen point your browser to [http://localhost:8000]().\n\nBelow is a ruby code for decoding the base64-encoded file to be passed to paperclip:\n```ruby\ndef create\n  @resource.attachment = decode_base64\n  # save resource and render response ...\nend\n\ndef decode_base64\n  # decode base64 string\n  Rails.logger.info 'decoding base64 file'\n  decoded_data = Base64.decode64(params[:your_model][:base64])\n  # create 'file' understandable by Paperclip\n  data = StringIO.new(decoded_data)\n  data.class_eval do\n    attr_accessor :content_type, :original_filename\n  end\n\n  # set file properties\n  data.content_type = params[:your_model][:filetype]\n  data.original_filename = params[:your_model][:filename]\n\n  # return data to be used as the attachment file (paperclip)\n  data\nend\n```\n\nContribution\n------------\n - Using [Grunt](http://gruntjs.com) as build tool\n - Uses [jasmine 1.3](http://jasmine.github.io/1.3/introduction.html) in writing unit test specs\n - `grunt test` to run unit tests\n - `grunt build` to build the project\n - Update `README.md` and `CHANGELOG.md` to reflect the new changes\n - Update the version number of `package.json` and `bower.json`\n\nChange Log\n----------------------------\n See [CHANGELOG.md](./CHANGELOG.md)\n\n\nAuthor\n-------\n[Adones Pitogo](http://adonespitogo.com)\n\nContributors\n------------\nSee [contributors list](https://github.com/adonespitogo/angular-base64-upload/graphs/contributors)\n\n## License\n\nReleased under the terms of MIT License.\n",
  "readmeFilename": "README.md",
  "_id": "angular-base64-upload@0.1.19",
  "dist": {
    "shasum": "df4cbc2372b87015f29c7b82b44b9f29c3d3d870"
  },
  "_from": "angular-base64-upload@",
  "_resolved": "https://registry.npmjs.org/angular-base64-upload/-/angular-base64-upload-0.1.19.tgz"
}
